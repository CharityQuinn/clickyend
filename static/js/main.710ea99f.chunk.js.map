{"version":3,"sources":["containers/Navbar.js","containers/Jumbotron.js","containers/Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","currentScore","topScore","Jumbotron","Game","state","cardData","Object","toConsumableArray","handleCardClick","cardId","isCorrect","_this","forEach","card","id","clicked","handleCorrect","handleIncorrect","shuffledCards","sort","Math","random","setState","_this2","this","Fragment","containers_Navbar","containers_Jumbotron","map","key","src","image","alt","name","onClick","Component","App","containers_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAaeA,MAXf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAhB,eACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,kBACkBJ,EAAMK,aADxB,kBACqDL,EAAMM,YCIhDC,MATf,WACE,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8DACfH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,kFCsGWK,6MA7FbC,MAAQ,CACNC,SAASC,OAAAC,EAAA,EAAAD,CAAKD,GACdL,aAAc,EACdC,SAAU,KAIZO,gBAAkB,SAAAC,GAEhB,IAAIC,GAAY,EAGVL,EAAQC,OAAAC,EAAA,EAAAD,CAAOK,EAAKP,MAAMC,UAKhCA,EAASO,QAAQ,SAAAC,GACXA,EAAKC,KAAOL,IACTI,EAAKE,UACRL,GAAY,EACZG,EAAKE,SAAU,MAQrBL,EAAYC,EAAKK,cAAcX,GAAYM,EAAKM,gBAAgBZ,MAGlEW,cAAgB,SAAAX,GAEd,IAAMa,EAAgBb,EAASc,KAAK,iBAAM,GAAMC,KAAKC,WAG/CrB,EAAeW,EAAKP,MAAMJ,aAAe,EAE3CC,EAAWU,EAAKP,MAAMH,SAGtBD,EAAeC,IACjBA,EAAWD,GAGbW,EAAKW,SAAS,CACZjB,SAAUa,EACVlB,aAAcA,EACdC,SAAUA,OAIdgB,gBAAkB,SAAAZ,GAChB,IAAMa,EAAgBb,EAASc,KAAK,iBAAM,GAAMC,KAAKC,WAGrDH,EAAcN,QAAQ,SAAAC,GAAI,OAAKA,EAAKE,SAAU,IAE9CJ,EAAKW,SAAS,CACZjB,SAAUa,EACVlB,aAAc,6EAIT,IAAAuB,EAAAC,KACP,OACE5B,EAAAC,EAAAC,cAACF,EAAAC,EAAM4B,SAAP,KACE7B,EAAAC,EAAAC,cAAC4B,EAAD,CACE1B,aAAcwB,KAAKpB,MAAMJ,aACzBC,SAAUuB,KAAKpB,MAAMH,WACvBL,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDAEZyB,KAAKpB,MAAMC,SAASuB,IAAI,SAAAf,GACvB,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2B8B,IAAKhB,EAAKC,IAClDlB,EAAAC,EAAAC,cAAA,OACEgC,IAAKjB,EAAKkB,MACVC,IAAKnB,EAAKoB,KACVlC,UAAU,kCACVmC,QAAS,kBAAMX,EAAKf,gBAAgBK,EAAKC,oBAnF1CqB,aCTJC,EAFH,kBAAMxC,EAAAC,EAAAC,cAACuC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.710ea99f.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark d-flex justify-space-between\">\r\n    <span className=\"navbar-brand mb-0\">Clicky Game</span>\r\n    <span className=\"scoreInfo text-light\">\r\n      Current Score: {props.currentScore} || Top Score: {props.topScore}\r\n    </span>\r\n  </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n","import React from \"react\"\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid bg-warning text-dark text-center\">\r\n    <h1>Welcome to the clicky game!</h1>\r\n    <p>Click on a card to get started. Don't click on the same card twice.</p>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","// import dependences and data\r\nimport React, { Component } from 'react';\r\nimport cardData from '../clickCards.json';\r\nimport Navbar from '../containers/Navbar';\r\nimport Jumbotron from '../containers/Jumbotron';\r\n\r\n/* \r\n{\r\n  id: 1,\r\n  image: \"./images/ryu.jpg\",\r\n  clicked: false,\r\n} \r\n*/\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    cardData: [...cardData],\r\n    currentScore: 0,\r\n    topScore: 0\r\n  };\r\n\r\n  // create method to handle clicking on a card\r\n  handleCardClick = cardId => {\r\n    // create a flag variable to check if we're correct or not\r\n    let isCorrect = false;\r\n\r\n    // make a copy of the cardData from state\r\n    const cardData = [...this.state.cardData];\r\n\r\n    // loop over that copied array and find the object with the id you clicked on\r\n    // check if card you clicked on has been clicked before\r\n    // if no => set isCorrect to true and set the card's clicked status to true\r\n    cardData.forEach(card => {\r\n      if (card.id === cardId) {\r\n        if (!card.clicked) {\r\n          isCorrect = true;\r\n          card.clicked = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    // check if isCorrect is true or false\r\n    // if true => run logic for handling a correct guess\r\n    // if false => run logic for handling an incorrect guess\r\n    isCorrect ? this.handleCorrect(cardData) : this.handleIncorrect(cardData);\r\n  };\r\n\r\n  handleCorrect = cardData => {\r\n    // shuffle cards\r\n    const shuffledCards = cardData.sort(() => 0.5 - Math.random());\r\n\r\n    // get current score and add 1 to it\r\n    const currentScore = this.state.currentScore + 1;\r\n\r\n    let topScore = this.state.topScore;\r\n\r\n    // check if current score is greater than topScore\r\n    if (currentScore > topScore) {\r\n      topScore = currentScore;\r\n    }\r\n\r\n    this.setState({\r\n      cardData: shuffledCards,\r\n      currentScore: currentScore,\r\n      topScore: topScore\r\n    });\r\n  };\r\n\r\n  handleIncorrect = cardData => {\r\n    const shuffledCards = cardData.sort(() => 0.5 - Math.random());\r\n\r\n    // reset all cards to not be clicked\r\n    shuffledCards.forEach(card => (card.clicked = false));\r\n\r\n    this.setState({\r\n      cardData: shuffledCards,\r\n      currentScore: 0\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar \r\n          currentScore={this.state.currentScore}\r\n          topScore={this.state.topScore}/>\r\n        <Jumbotron />\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row align-items-center justify-content-between\">\r\n            {/* print out cards here */}\r\n            {this.state.cardData.map(card => {\r\n              return (\r\n                <div className=\"col-12 col-sm-3 col-md-2\" key={card.id}>\r\n                  <img\r\n                    src={card.image}\r\n                    alt={card.name}\r\n                    className=\"img-fluid img-thumbnail rounded\"\r\n                    onClick={() => this.handleCardClick(card.id)}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Game;","import React from 'react';\nimport Game from './containers/Game';\n\nconst App = () => <Game/>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}